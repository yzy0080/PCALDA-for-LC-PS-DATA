#############  Negative ##########
#Neg Low
load("Neg_Low.RData")
#Neg High
load("Neg_High.RData")
#Combine all
mat.all<-cbind(High_frag,Low_frag)

##########         PCA        +         LDA         ############
############PCA###########
stand<-function(t){
  (t-min(t))/(max(t)-min(t))
}

newdf<-mat.all
newdf=newdf[, colSums(newdf) != 0]
Neg<-apply(newdf,2,stand) 

Neg_PCA <- prcomp(Neg) 
Neg.class<-c(rep("BL21",8),rep("C41",8),rep("CSH",8),rep("DH5",8),rep("DH10B",8),rep("K12",8),rep("S17",8))
# PC loadings
summary(Neg_PCA)
#ggbiplot
library(ggbiplot)

ggbiplot(Neg_PCA,choices = c(1,3), obs.scale = 1, var.scale = 1,var.axes =FALSE,
         groups = Neg.class, ellipse = FALSE, circle = FALSE)+#,labels = rownames(Neg))+
  geom_point(aes(colour=Neg.class, shape=Neg.class), size = 2) +
  theme_bw() +
  theme(legend.direction ="vertical", 
        legend.position = "right",
        axis.line = element_line(color='black'),
        plot.background = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_blank())

#loading plot
Loadingscore = Neg_PCA$rotation
Loadingscore = data.frame(Loadingscore, row.names = colnames(Neg))

plot(Loadingscore$PC1*0.001,                                # Draw plot
     Loadingscore$PC2*0.001,
     xlim=c(-0.04,0.02),
     ylim=c(-0.02,0.03),
     pch=20,cex=0.1,
     xlab = "PC1",
     ylab = "PC2")
text(Loadingscore$PC1,                                # Draw plot
     Loadingscore$PC2,
     labels = rownames(Loadingscore),
     pos = 2)


####LDA####
newdata<-data.frame(Neg_PCA$x[,1:3])
write.csv(newdata,"Neg_PCscore.csv",row.names = TRUE)
newdata$group<-as.factor(Neg.class)

############LDA#############
library(MASS)
time<-400
result<-rep(0,time)
set.seed(1)
test.idx <- c(sample(1:8, 1),sample(9:16, 1),sample(17:24, 1),sample(25:32, 1),sample(33:40, 1),sample(41:48, 1),sample(49:56, 1))
train <- newdata[-test.idx, ]
test <- newdata[test.idx, ]
linear <- lda(group~., train)
p2 <- predict(linear, test)$class
confusion<- table(Predicted = p2, Actual = test$group)
result[1]<-sum(diag(confusion))/sum(confusion)

for (i in 2:time) {
  set.seed(i)
  test.idx <- c(sample(1:8, 1),sample(9:16, 1),sample(17:24, 1),sample(25:32, 1),sample(33:40, 1),sample(41:48, 1),sample(49:56, 1))
  train <- newdata[-test.idx, ]
  test <- newdata[test.idx, ]
  
  linear <- lda(group~., train)
  p2 <- predict(linear, test)$class
  tab1 <- table(Predicted = p2, Actual = test$group)
  confusion<- confusion + tab1
  result[i]<-sum(diag(tab1))/sum(tab1)
}

mean(result)
confusion/400


#Feature rank based on PCA

rotation<-Pos_PCA$rotation[,1:4]
colnames(rotation)[4] = "ImportanceRank"
#calculate total variance explained by each principal component
var_explained = Pos_PCA$sdev^2 / sum(Pos_PCA$sdev^2)

for (i in 1:nrow(rotation)) {
  rotation[i,4] = abs(rotation[i,1]) * var_explained[1] + abs(rotation[i,2]) * var_explained[2] + abs(rotation[i,3]) * var_explained[3]
}

library(writexl)
write.csv(rotation,"Pos_PSrank.csv",row.names = TRUE)



##############   Fusion   ##########
#Combine Pos+Neg PC
#Pos PC
load("Pos_High.RData")
load("Pos_Low.RData")
PHigh<-High_frag
colnames(PHigh) <- paste0("Pos_",colnames(PHigh))
PLow<-Low_frag
colnames(PLow) <- paste0("Pos_",colnames(PLow))
mat.all<-cbind(PHigh,PLow)
stand<-function(t){
  (t-min(t))/(max(t)-min(t))
}
newdf<-mat.all
newdf=newdf[, colSums(newdf) != 0]
Pos<-apply(newdf,2,stand) 
Pos_PCA <- prcomp(Pos) 
Pos.class<-c(rep("BL21",7),rep("C41",8),rep("CSH",8),rep("DH5",8),rep("DH10B",8),rep("K12",8),rep("S17",8))
Pos_newdata<-data.frame(Pos_PCA$x[,1:3])
Pos_newdata$group<-as.factor(Pos.class)

#Neg PC
load("Neg_High.RData")
load("Neg_Low.RData")
NHigh<-High_frag
colnames(NHigh) <- paste0("Neg_",colnames(NHigh))
NLow<-Low_frag
colnames(NLow) <- paste0("Neg_",colnames(NLow))
mat.all<-cbind(NHigh,NLow)
stand<-function(t){
  (t-min(t))/(max(t)-min(t))
}
newdf<-mat.all
newdf=newdf[, colSums(newdf) != 0]
Neg<-apply(newdf,2,stand) 
Neg_PCA <- prcomp(Neg) 
Neg.class<-c(rep("BL21",7),rep("C41",8),rep("CSH",8),rep("DH5",8),rep("DH10B",8),rep("K12",8),rep("S17",8))
Neg_newdata<-data.frame(Neg_PCA$x[,1:3])
Neg_newdata$group<-as.factor(Neg.class)
#Combine
Comb_newdata = cbind(Pos_newdata$PC1,Pos_newdata$PC2,Pos_newdata$PC3,Neg_newdata$PC1,Neg_newdata$PC2,Neg_newdata$PC3)


#PCA
Comb_PCA <- prcomp(Comb_newdata) 
Comb_newdata.class<-c(rep("BL21",7),rep("C41",8),rep("CSH",8),rep("DH5",8),rep("DH10B",8),rep("K12",8),rep("S17",8))
#ggbiplot
library(ggbiplot)
ggbiplot(Comb_PCA,choices = c(1,4), obs.scale = 1, var.scale = 1,var.axes =FALSE,
         groups = Neg.class, ellipse = FALSE, circle = FALSE)+#,labels = rownames(Neg))+
  geom_point(aes(colour=Neg.class, shape=Neg.class), size = 2) +
  theme_bw() +
  theme(legend.direction ="vertical", 
        legend.position = "right",
        axis.line = element_line(color='black'),
        plot.background = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_blank())


#Data Plot
Comb = data.frame(Comb_newdata)
colnames(Comb) = c("Pos_PC1","Pos_PC2","Pos_PC3","Neg_PC1","Neg_PC2","Neg_PC3")
Comb$Class = c(rep("BL21",7),rep("C41",8),rep("CSH",8),rep("DH5",8),rep("DH10B",8),rep("K12",8),rep("S17",8))


ggplot(data = Comb, mapping = aes(x = Pos_PC3, y = Neg_PC3)) +
  geom_point(alpha = 1, aes(color = Class)) +
  theme_bw() +
  theme(legend.direction ="vertical", 
        legend.position = "right",
        axis.line = element_line(color='black'),
        plot.background = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_blank())



#calculate total variance explained by each principal component
var_explained = Neg_PCA$sdev^2 / sum(Neg_PCA$sdev^2)

#create scree plot
library(ggplot2)
qplot(c(1:56), var_explained) + 
  geom_line() + 
  xlab("Principal Component") + 
  ylab("Variance Explained") +
  ggtitle("Scree Plot") +
  ylim(0, 0.5)+
  theme_bw() +
  theme(legend.direction ="vertical", 
        legend.position = "right",
        axis.line = element_line(color='black'),
        plot.background = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_blank())


